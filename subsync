#!/usr/bin/python3
# -*- coding: utf-8 -*-

import sys
import re


def prRed(skk): print("\033[91m{}\033[00m" .format(skk),end='') 
def prGreen(skk): print("\033[92m{}\033[00m" .format(skk),end='') 
def prYellow(skk): print("\033[93m{}\033[00m" .format(skk),end='')
def prCyan(skk): print("\033[96m{}\033[00m" .format(skk),end='') 


def synctime():
    import datetime as dt
    
    sub_start_min=int(input("Enter subtitle start min : "))
    sub_start_sec=int(input("Enter subtitle start min : "))
    video_start_min=int(input("Enter video-audio start min : "))
    video_start_sec=int(input("Enter video-audio start sec : "))


    a = dt.datetime(100,1,1,0,video_start_min,video_start_sec)
    b = dt.datetime(100,1,1,0,sub_start_min,sub_start_sec)


    if('-' in str((a-b).total_seconds()) ):
        prYellow("\nTime Difference : ")
        prRed(str((a-b).total_seconds()))
        prRed(" seconds\n\n")
    else:
        prYellow("\nTime Difference : ")
        prGreen(str((a-b).total_seconds()))
        prGreen(" seconds\n\n")


def hasten(time,sec):
    import datetime
    a = datetime.datetime(100,1,1,int(time[0]),int(time[1]),int(time[2]))
    b = a - datetime.timedelta(seconds=sec)
    return b.time()   


def delay(time,sec): 
    import datetime
    a = datetime.datetime(100,1,1,int(time[0]),int(time[1]),int(time[2]))
    b = a + datetime.timedelta(seconds=sec)
    return b.time()


def calibrate():
    prCyan("\nType : TEXT (Input in text only)")
    prYellow("\nFile Name : ")
    name=input()
    
    prCyan("\nType : INT (Input in number only)\n")
    prYellow("Seconds : ")
    sec=int(input())

    ch=input("\n1.Delay[D/d]\t2.Hasten[H/h]\n\nChoose[Hh/Dd] = ")

    f=open(name,"r")
    f1=open("sync_"+name,"w")

    if(ch=='D' or ch=='d'):
        prYellow("\nFile Name : ")
        print(str(name))
        prYellow("Delay : ")
        print(str(sec)+" seconds")

    elif(ch=='H' or ch=='h'):
        prYellow("\nFile Name : ")
        print(str(name))
        prYellow("Hast : ")
        print(str(sec)+" seconds")
    else:
        prRed("\nEnter Valid Choice\n\n")
        exit(0)

    for line in f:
        all_line=line.split()
        if('-->'in all_line):
            if(ch=='D' or ch=='d'):
                #start_time
                start_time=all_line[0].split(":")
                start_time_end=start_time[2].split(",")[1]
                start_time=[re.sub(',.*$', '', i) for i in start_time]
                delayed_start_time=delay(start_time,sec)

                #end_time
                end_time=all_line[2].split(":")
                end_time_end=end_time[2].split(",")[1]
                end_time=[re.sub(',.*$', '', i) for i in end_time]
                delayed_end_time=delay(end_time,sec)

                #writing to file
                f1.write(str(delayed_start_time)+','+str(start_time_end)+' --> '+str(delayed_end_time)+','+str(end_time_end))
                f1.write("\n")

            elif(ch=='H' or ch=='h'):
                #start_time
                start_time=all_line[0].split(":")
                start_time_end=start_time[2].split(",")[1]
                start_time=[re.sub(',.*$', '', i) for i in start_time]
                hastened_start_time=hasten(start_time,sec)
        
                #end_time
                end_time=all_line[2].split(":")
                end_time_end=end_time[2].split(",")[1]
                end_time=[re.sub(',.*$', '', i) for i in end_time]
                hastened_end_time=hasten(end_time,sec)

                #writing to file
                f1.write(str(hastened_start_time)+','+str(start_time_end)+' --> '+str(hastened_end_time)+','+str(end_time_end))
                f1.write("\n")

        else:
            f1.write(line)

    prGreen("\nSUCCESS!\n")
    print("File Generated : sync_"+name)
    print("")


try:
    if(len(sys.argv)==1):
        print("usage: subsync [--help] [--sync-time] [--calibrate]")
    elif (sys.argv[1] == '--h' or sys.argv[1] == '--help' or sys.argv[1] == '-h' or sys.argv[1] == '-help' ):
        print('--sync-time\tTo find haste/delay between video and subtitle in sec')
        print('--calibrate\tTo sync subtitles')
    
    elif sys.argv[1] == '--sync-time':
        prCyan("\nType : INT (Input in number only)\n")
        synctime()

    elif sys.argv[1] == '--calibrate':
        calibrate()
    else:
        print("unknown option: "+str(sys.argv[1]))
        print("usage: subsync [--help] [--sync-time] [--calibrate]")
except Exception:
    prRed("\nError Occured\n\n")
    print("usage: subsync [--help] [--sync-time] [--calibrate]")
    prYellow("\nRefer documentation for further explination with examples\n")
    print("Documentation link : ",end="")
    prGreen("https://github.com/kushtej/subsync")

